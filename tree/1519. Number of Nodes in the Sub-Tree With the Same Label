void solve(int node,vector<vector<int>>&adj,string &labels,int prev,vector<int>&ans,vector<int>&count){
     
     int prevcount=count[labels[node]-'a'];
     count[labels[node]-'a']++;
     for(auto i:adj[node]){
         if(i==prev)continue;
         solve(i,adj,labels,node,ans,count);
     }
     ans[node]=count[labels[node]-'a']-prevcount;

}
    vector<int> countSubTrees(int n, vector<vector<int>>& edges, string labels) {
        vector<int>count(26,0);
        vector<vector<int>>adj(n);
        for(int i=0;i<edges.size();i++){
            adj[edges[i][0]].push_back(edges[i][1]);
            adj[edges[i][1]].push_back(edges[i][0]);
        }
        vector<int>ans(n);
        solve(0,adj,labels,0,ans,count);
        return ans;
    }
