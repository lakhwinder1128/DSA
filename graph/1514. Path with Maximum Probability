 double maxProbability(int n, vector<vector<int>>& edges, vector<double>& succProb, int start, int end) {
        //priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>>pq;
        priority_queue<pair<double,int>>pq;
        vector<double>dist(n,0);   //mark initial prob of all as 0 because we have to find max prob path
             dist[start]=1;
        double ans=0;
        vector<vector<pair<int,double>>>adj(n);
        for(int i=0;i<edges.size();i++){
            adj[edges[i][0]].push_back({edges[i][1],succProb[i]});
            adj[edges[i][1]].push_back({edges[i][0],succProb[i]});
        }

        pq.push({1,start});       // prob of start is 1 

        while(pq.size()){
            double prob=pq.top().first;
            int node=pq.top().second;
           // cout<<prob<<" ";
            pq.pop();
            if(node==end)return prob;
            for(auto i:adj[node]){
                double nextprob=i.second;
                int nextnode=i.first;
                if(dist[nextnode]<prob*nextprob){
                    dist[nextnode]=prob*nextprob;
                  //  cout<<"dist= "<<dist[nextnode]<<" ";
                    pq.push({dist[nextnode],nextnode});
                }
            }

        }
        for(int i=0;i<dist.size();i++){cout<<dist[i]<<" ";}
        return 0;
    }
