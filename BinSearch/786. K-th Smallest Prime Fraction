class Solution {
public:
    vector <int> solve(vector<int>&arr,double target){
        // return target se smaller kitne elements(ratioes) hai, sabse largest ratio ka num,den
        // ratio should be smaller than target
        // let i be num as num<den
        // let j be den
        int n=arr.size();
        int num=arr[0];
        int den=arr[n-1];
        int count=0;
        int i=0;
        for(int j=1;j<n;j++){
           
        //  1 2 3 5 7 11 13
          while(i<n&&arr[i]<=arr[j]*target)i++;
          // now arr[i]/arr[j]> target
          if(i>0&&arr[i-1]*den>arr[j]*num){        //updating den ,num for largest ratio smaller than target
              num=arr[i-1];
              den=arr[j];
              
          }
          count+= i;        // counting for each den 
          

        }
        return {count,num,den};
    }
    vector<int> kthSmallestPrimeFraction(vector<int>& arr, int k) {
        int n=arr.size();
        double l=(double)arr[0]/arr[n-1];
        double h=1;
        while(l<h){
            double m=(l+h)/2;
            vector<int> count=solve(arr,m);   //count ,num,den
            if(count[0]==k){
                return {count[1],count[2]};
            }
            else if(count[0]<k)l=m;
            else h=m;
        }
        return {0};
    }
};
