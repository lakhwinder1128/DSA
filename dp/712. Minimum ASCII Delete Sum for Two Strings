string  lcs(string a,string b){
   
    int n=a.size();
    int m=b.size();
     int dp[n+1][m+1];
    for(int i=0;i<=n;i++)dp[i][0]=0;
    for(int j=0;j<=m;j++)dp[0][j]=0;

    for(int i=1;i<=n;i++){
        for(int j=1;j<=m;j++){
            if(a[i-1]==b[j-1])dp[i][j]=dp[i-1][j-1]+a[i-1];
            else
            dp[i][j]=max(dp[i-1][j],dp[i][j-1]);
        }
    }
   // cout<<"lcs"<<dp[n][m]<<endl;
string ans;
int i=n,j=m;
while(i>0&&j>0){
        if(a[i-1]==b[j-1]){
            ans.push_back(a[i-1]);
            i--;
            j--;}
        else if(dp[i][j-1]>dp[i-1][j])j--;
        else i--;
    }

return ans;

    
}
    int minimumDeleteSum(string s1, string s2) {
        string a=lcs(s1,s2);
        reverse(a.begin(),a.end());
        //cout<<a;
        int a_ind=0;
        int ans=0;
        for(int i=0;i<s1.size();i++){
            if(s1[i]==a[a_ind]){
                a_ind++;
            }
            else{
                ans=ans+s1[i];
               // cout<<s1[i]<<" ";
            }
        }
          a_ind=0;
        for(int i=0;i<s2.size();i++){
            if(s2[i]==a[a_ind]){
                a_ind++;
            }
            else{
                ans=ans+s2[i];
                //cout<<s2[i]<<" ";
            }
        }
        return ans;
    }
