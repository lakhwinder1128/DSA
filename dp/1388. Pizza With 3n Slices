int solve(int ind,int endindex ,vector<int>&slices,int n, vector<vector<int>>&dp){
 
    if(ind>endindex||n==0)return 0;
    if(dp[ind][n]!=-1)return dp[ind][n];
      
    int take=solve(ind+2,endindex,slices,n-1,dp)+slices[ind];
    int nottake=solve(ind+1,endindex,slices,n,dp);

       
    return dp[ind][n]= max(take,nottake);
}
    int maxSizeSlices(vector<int>& slices) {
       int k=slices.size();
       vector<vector<int>>dp1(k+1,vector<int>(k,-1));
       int case1=solve(0,k-2,slices,k/3,dp1);
        vector<vector<int>>dp2(k+1,vector<int>(k,-1));
       int case2=solve(1,k-1,slices,k/3,dp2);

        
        return max(case1,case2);
    }
