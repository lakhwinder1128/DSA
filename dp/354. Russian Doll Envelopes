   int maxEnvelopes(vector<vector<int>>& envelopes) {
        sort(envelopes.begin(),envelopes.end());
        int n=envelopes.size();
        int ans=0;
        vector<int>LIS(n,1);
        for(int i=0;i<n;i++){
            
            for(int prev=0;prev<i;prev++){
                if(envelopes[i][0]>envelopes[prev][0]&&envelopes[i][1]>envelopes[prev][1]){
                    LIS[i]=max(LIS[i],LIS[prev]+1);
                }
            }
            ans=max(ans,LIS[i]);
        }
        return ans;
    }
    
    OPTIMAL:::::::::::::::::::::::::::::
    
  BINARY SEARCH::::
  ******************************************************************************************************
  bool cmp(vector<int>&a,vector<int>&b){
    if(a[0]==b[0])return a[1]>b[1];
    else return a[0]<b[0];
}
class Solution {
public:

    int maxEnvelopes(vector<vector<int>>& envelopes) {
        
        int n=envelopes.size();
        if(n==0)return 0;
        sort(envelopes.begin(),envelopes.end(),cmp);
        vector<int>ans;
        ans.push_back(envelopes[0][1]);
        for(int i=1;i<n;i++){
             if(ans.back()<envelopes[i][1])ans.push_back(envelopes[i][1]);
             else {
                 int ind=lower_bound(ans.begin(),ans.end(),envelopes[i][1])-ans.begin();
                 ans[ind]=envelopes[i][1];
             }
        }
        return ans.size();
    }
};
